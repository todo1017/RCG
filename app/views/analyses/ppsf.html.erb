<link href="https://cdn.rawgit.com/novus/nvd3/v1.8.1/build/nv.d3.css" rel="stylesheet" type="text/css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.2/d3.min.js" charset="utf-8"></script>
<script src="https://cdn.rawgit.com/novus/nvd3/v1.8.1/build/nv.d3.js"></script>
<style>
	.tooltip {
	 	position: absolute;
		text-align: center;               
		padding: 20px;
		font: 12px sans-serif;
		background: white;
		border: 0px;
		border-radius: 4px;
		pointer-events: none;
		/*min-width: 100px;*/
		text-align: left;
		border: 1px solid #888;
	}
</style>
<div id="analyses-ppsf">
	<div class="row">
		<div class="analyses-title">
			<h1 class="text-center">Price per square Foot</h1>
		</div>
	</div>
	<ul class="nav nav-pills nav-justified">
		<li class="active"><a data-toggle="pill" href="#rental_price_trend">Rental Price Trend Over Time</a></li>
		<li id="link_to_clustered_building_rent"><a data-toggle="pill" href="#clustered_building_rent">Clustered Building Rent</a></li>
	</ul>
	<div class="tab-content">
		<div id="rental_price_trend" class="tab-pane fade in active">
			<div class="col-xs-4">
				<div>
					<h3>Show</h3>
					<div class="show-content row">
						<ul class="nav nav-pills nav-justified pill-color-1">
							<li class="active set_by_month"><a data-toggle="pill">By Month</a></li>
							<li class="set_by_quarter"><a data-toggle="pill">By Quarter</a></li>
							<li class="set_by_year"><a data-toggle="pill">By Year</a></li>
						</ul>
					</div>
				</div>
				<div>
					<h3>Alternative</h3>
					<div class="alternative-content row">
						<ul class="nav nav-pills nav-justified pill-color-1">
							<li class="active set_gross"><a data-toggle="pill">Gross Rent</a></li>
							<li class="set_net"><a data-toggle="pill">Net Rent</a></li>
						</ul>
					</div>
				</div>
				<div>
					<h3>Filter</h3>
					<div class="filter-content row">
						<div class="row">
							<div class="panel-group">
								<% @geographies.each do |geography| %>
									<div class="col-xs-6" style="padding-bottom: 5px">
										<div class="panel panel-default">
											<div class="panel-heading">
												<%= geography.name %>
											</div>
											<div>
												<div class="panel-body">
													<% @comp_groups.each do |comp_group| %>
														<div class="checkbox"><label><input type="checkbox" value="<%= geography.id.to_s + '_' +comp_group.id.to_s %>"><%= comp_group.name %></label></div>
													<% end %>	
												</div>
											</div>
										</div>
									</div>
								<% end %>
							</div>
						</div>
						<h4>
							<button type="button" class="btn btn-default apply-filter">Apply Filter</button>
						</h4>
					</div>
				</div>
			</div>
			<div class="col-xs-8">
				<div id="rpt-chart" style="height: 500px">
					<!-- <canvas style="width: 400px;height: 200px"></canvas> -->
				</div>
			</div>
		</div>
		<div id="clustered_building_rent" class="tab-pane fade">
			<div class="col-xs-4">
				<div>
					<h3>Alternative</h3>
					<div class="alternative-content row">
						<ul class="nav nav-pills nav-justified pill-color-1">
							<li class="set_gross active"><a data-toggle="pill">Gross Rent</a></li>
							<li class="set_net"><a data-toggle="pill">Net Rent</a></li>
						</ul>
					</div>
				</div>
				<div>
					<h3>Filter</h3>
					<div class="filter-content row">
						<div class="form-group">
							<label for="from">From</label>
							<input class="form-control" type="text" id="from" name="from">
						</div>
						<div class="form-group">
							<label for="to">To</label>
							<input class="form-control" type="text" id="to" name="to">
						</div>
						<div class="row">
							<div class="panel-group">
								<% @geographies.each do |geography| %>
									<div class="col-xs-6" style="padding-bottom: 5px">
										<div class="panel panel-default">
											<div class="panel-heading">
												<%= geography.name %>
											</div>
											<div>
												<div class="panel-body">
													<% @comp_groups.each do |comp_group| %>
														<div class="checkbox"><label><input type="checkbox" value="<%= geography.id.to_s + '_' +comp_group.id.to_s %>"><%= comp_group.name %></label></div>
													<% end %>	
												</div>
											</div>
										</div>
									</div>
								<% end %>
							</div>
						</div>
						<h4>
							<button type="button" class="btn btn-default apply-filter">Apply Filter</button>
						</h4>
					</div>
				</div>
			</div>
			<div class="col-xs-8">
				<div id="cbr-chart" style="height: 500px">
				</div>
			</div>
		</div>
	</div>
</div>

<script>

	// NVD3 Chart
	var building_color = {};
	var rpt_filter1 = "month";
	var rpt_filter2 = "gross";
	var rpt_data    = {};
	var rpt_chart;

	rpt_init();

	//init checkbox unchecked
	$("#rental_price_trend input").attr("checked", true);

	// update rpt chart by filter
	$("#rental_price_trend .set_by_year").on("click", function(e){
		rpt_filter1 = "year";
		update_rpt_chart();
	});
	$("#rental_price_trend .set_by_quarter").on("click", function(e){
		rpt_filter1 = "quarter";
		update_rpt_chart();
	});
	$("#rental_price_trend .set_by_month").on("click", function(e){
		rpt_filter1 = "month";
		update_rpt_chart();
	});
	$("#rental_price_trend .set_gross").on("click", function(e){
		rpt_filter2 = "gross";
		update_rpt_chart();
	});
	$("#rental_price_trend .set_net").on("click", function(e){
		rpt_filter2 = "net";
		update_rpt_chart();
	});

	// apply filter
	$('#rental_price_trend .apply-filter').on("click", function(e){
		var filter_list = [];
		$("#rental_price_trend input").each(function(){
			if(this.checked){
				filter_list.push(this.value)
			}
		});

		if(filter_list.length) {
			$.get( "/analyses/api",
				{
					type : "ppsf_rpt",
					filter_list : filter_list
				},
				function( result ) {
					rpt_data = result;
					update_rpt_chart();
				}
			);
		} else {
			rpt_empty();
		}
	});

	function update_rpt_chart() {
		
		var rawdata = rpt_data.data[rpt_filter2][rpt_filter1];

		if (!jQuery.isEmptyObject(rawdata)) {

			var tickValues = [], tickIndex = [];
			$.each(rawdata, function(name, values){
				if(values.length) {
					$.each(values, function(index, value){
						if(tickValues.indexOf(value.label) == -1){
							tickValues.push(value.label);
							tickIndex.push(tickValues.length - 1);
						}
					});
				}
			});
			tickValues.sort();

			var data = [];

			var chart_values = [];
			for(i = 0 ; i < tickIndex.length ; i ++) {
				maxValue = 0;
				$.each(rawdata, function(name, values){
					if(values.length) {
						$.each(values, function(index, value){
							if(value.label == tickValues[i]){
								if(value.val > maxValue) {
									maxValue = value.val;
								}
							}
						});
					}
				});
				chart_values.push({x: i, y: maxValue});
			}
			data.push({
				values: chart_values,
				key: "Max",
				color: "white"
			});
			$.each(rawdata, function(name, values){
				if(values.length) {
					var chart_values = [];
					$.each(values, function(index, value){
						chart_values.push({x: tickValues.indexOf(value.label), y: value.val});
					});
					var random_color = '#'+Math.floor(Math.random()*16777215).toString(16);
					data.push({
						values: chart_values,
						key: name,
						color: building_color[name]
					});
				}
			});

			if(rpt_filter1 == "month") {
				$.each(tickValues, function(i, val){
					var y_m = val.split('-');
					tickValues[i] = y_m[1] + '/' + y_m[0];
				});
			}

			rpt_chart.xAxis
				.tickValues(tickIndex)
				.tickFormat(function(d){
					return tickValues[d];
				});
				
			d3.select('#rpt-chart svg')
				.datum(data)
				.call(rpt_chart);

			nv.utils.windowResize(rpt_chart.update);
			
		} else {
			rpt_empty();
		}
	}

	function rpt_empty() {
		data = [
			{
				values: [{x: 0, y: 0},{x: 1, y: 1}],
				key: "Empty",
				color: "white"
			}
		];
		
		rpt_chart = nv.models.lineChart()
			.options({
				duration: 300,
				useInteractiveGuideline: true,
				interpolate: "cardinal"
			});

		rpt_chart.xAxis.tickValues([0,1])

		rpt_chart.yAxis
			.tickValues([0,1])
			.tickFormat(function(d) {
				if (d == null) {
					return 'N/A';
				}
				return "$" + d3.format(',.2f')(d);
			});

		d3.select('#rpt-chart').append('svg')
			.datum(data)
			.call(rpt_chart);

		nv.utils.windowResize(rpt_chart.update);
	}

	function rpt_init() {
		var filter_list = [];
		$("#rental_price_trend input").each(function(){
			filter_list.push(this.value)
		});
		$.get( "/analyses/api",
			{
				type        : 'ppsf_rpt',
				filter_list : filter_list
			},
			function( result ) {
				$.each(result.data.gross.month, function(i, d){
					var random_color = '#'+Math.floor(Math.random()*16777215).toString(16);
					building_color[i] = random_color;
				})
				rpt_empty();
				rpt_data = result;
				update_rpt_chart();
			}
		);
	}

</script>

<script>

	// D3.js custom bar chart
	var cbr_filter = "gross";
	var cbr_data   = {};
	var cbr_initiated = false;
	var cbr_svg;

	// init checkbox unchecked
	$("#clustered_building_rent input").attr("checked", true);

	// immediate filter set
	$("#clustered_building_rent .set_gross").on("click", function(e){
		cbr_filter = "gross";
		update_cbr_chart();
	});
	$("#clustered_building_rent .set_net").on("click", function(e){
		cbr_filter = "net";
		update_cbr_chart();
	});


	// apply filter
	$('#clustered_building_rent .apply-filter').on("click", function(e){
		var filter_list = [];
		$("#clustered_building_rent .checkbox input").each(function(){
			if(this.checked){
				filter_list.push(this.value)
			}
		});
		var from_date = $.datepicker.formatDate("dd-mm-yy",from.datepicker("getDate"));
		var to_date   = $.datepicker.formatDate("dd-mm-yy",to.datepicker("getDate"));
		$.get( "/analyses/api",
			{
				type        : 'ppsf_cbr',
				from_date   : from_date,
				to_date     : to_date,
				filter_list : filter_list
			},
			function( result ) {
				cbr_data = result;
				update_cbr_chart();
			}
		);
	});

	$('#link_to_clustered_building_rent').on("click", function(e){
		if(cbr_initiated == false) {
			cbr_initiated = true;
			setTimeout(cbr_init, 300);
		}
	});

	// Date filter
	var dateFormat = "mm/dd/yy";
	var from = $("#from")
		.datepicker({
			defaultDate: "+1w",
			changeMonth: true,
			changeYear: true,
			numberOfMonths: 1
		})
		.on("change", function() {
			to.datepicker( "option", "minDate", getDate( this ) );
		});
	var to = $( "#to" )
		.datepicker({
			defaultDate: "+1w",
			changeMonth: true,
			changeYear: true,
			numberOfMonths: 1
		})
		.on("change", function() {
			from.datepicker( "option", "maxDate", getDate( this ) );
		});
	var from_day = new Date(), to_day = from_day.setDate(from_day.getDate() - 30);
	to.datepicker("setDate", to_day);
	from.datepicker("setDate", from_day);
	to.datepicker("option", "maxDate", new Date());
	from.datepicker("option", "maxDate", new Date());

	function getDate( element ) {
		var date;
		try {
			date = $.datepicker.parseDate( dateFormat, element.value );
		} catch( error ) {
			date = null;
		}
		return date;
	}

	// chart actions
	function cbr_init() {
		cbr_empty();

		var filter_list = [];
		$("#clustered_building_rent .checkbox input").each(function(){
			if(this.checked){
				filter_list.push(this.value)
			}
		});
		var from_date = $.datepicker.formatDate("dd-mm-yy",from.datepicker("getDate"));
		var to_date   = $.datepicker.formatDate("dd-mm-yy",to.datepicker("getDate"));

		$.get( "/analyses/api",
			{
				type        : 'ppsf_cbr',
				from_date   : from_date,
				to_date     : to_date,
				filter_list : filter_list
			},
			function( result ) {
				cbr_data = result;
				update_cbr_chart();
			}
		);
	}

	function cbr_empty() {
		d3.select('#clustered_building_rent svg').remove();
		var cbr_data = [
			{
				building : "Empty",
				val  : 0
			}
		];
		var commasFormatter = d3.format(",.2f")
		var cbr_margin = {top: 20, right: 20, bottom: 60, left: 60},
			cbr_width  = $('#cbr-chart').width() - cbr_margin.left - cbr_margin.right,
			cbr_height = $('#cbr-chart').height() - cbr_margin.top - cbr_margin.bottom;
		var cbr_xscale = d3.scale.ordinal()
			.rangeRoundBands([0, cbr_width], .1)
			.domain(["Empty"]);
		var cbr_yscale = d3.scale.linear()
			.range([cbr_height, 0])
			.domain([0, 1]);
		var cbr_xAxis = d3.svg.axis()
			.scale(cbr_xscale)
			.orient("bottom");
		var cbr_yAxis = d3.svg.axis()
			.scale(cbr_yscale)
			.orient("left")
			.ticks(10)
			.tickSize(0)
			.tickPadding(10)
			.tickFormat(function(d) { return "$" + commasFormatter(d)});
		cbr_svg = d3.select("#cbr-chart")
			.append("svg")
			.attr("width", cbr_width + cbr_margin.left + cbr_margin.right)
			.attr("height", cbr_height + cbr_margin.top + cbr_margin.bottom)
			.append("g")
			.attr("transform", "translate(" + cbr_margin.left + "," + cbr_margin.top + ")");
		cbr_svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + cbr_height + ")")
			.call(cbr_xAxis);
		cbr_svg.append("g")
			.attr("class", "y axis")
			.call(cbr_yAxis);
		cbr_svg.selectAll(".bar")
			.data(cbr_data)
			.enter()
			.append("rect")
			.attr("class", "bar")
			.attr("x", function(d) { return cbr_xscale(d.building)})
			.attr("width", cbr_xscale.rangeBand())
			.attr("y", function(d) { return cbr_yscale(d.val)})
			.attr("height", function(d) { return cbr_height - cbr_yscale(d.val)});
	}

	function update_cbr_chart() {
		
		var data = cbr_data.data[cbr_filter];

		if(data.length) {

			// Geography point
			var geography_data = [];
			$.each(data, function(i, d){
				if(!geography_data.length) {
					geography_data.push({
						name  : d.geo,
						start : d.building,
						end   : d.building
					});
				} else {
					if(geography_data[geography_data.length-1].name == d.geo) {
						geography_data[geography_data.length-1].end = d.building;
					} else {
						geography_data.push({
							name  : d.geo,
							start : d.building,
							end   : d.building
						});
					}
				}
			});
			console.log(geography_data);

			// Draw Chart
			d3.select('#clustered_building_rent svg').remove();
			var commasFormatter = d3.format(",.2f");
			var tooltip   = d3.select("#analyses-ppsf").append("div").attr("class", "tooltip hidden");
			var cbr_margin = {top: 20, right: 20, bottom: 80, left: 60},
				cbr_width  = $('#cbr-chart').width() - cbr_margin.left - cbr_margin.right,
				cbr_height = $('#cbr-chart').height() - cbr_margin.top - cbr_margin.bottom;
			var cbr_xscale = d3.scale.ordinal()
				.rangeRoundBands([0, cbr_width], .1)
				.domain(data.map(function(d) { return d.building}));
			var cbr_yscale = d3.scale.linear()
				.range([cbr_height, 0])
				.domain([0, d3.max(data, function(d) { return d.val})]);
			var cbr_xAxis = d3.svg.axis()
				.scale(cbr_xscale)
				.orient("bottom")
				.tickSize(0)
				.tickPadding(10);
			var cbr_yAxis = d3.svg.axis()
				.scale(cbr_yscale)
				.orient("left")
				.ticks(10)
				.tickSize(0)
				.tickPadding(10)
				.tickFormat(function(d) { return "$" + commasFormatter(d)});
			cbr_svg = d3.select("#cbr-chart")
				.append("svg")
				.attr("width", cbr_width + cbr_margin.left + cbr_margin.right)
				.attr("height", cbr_height + cbr_margin.top + cbr_margin.bottom)
				.append("g")
				.attr("transform", "translate(" + cbr_margin.left + "," + cbr_margin.top + ")");
			cbr_svg.append("g")
				.attr("class", "x axis")
				.attr("transform", "translate(0," + cbr_height + ")")
				.call(cbr_xAxis);
			cbr_svg.append("g")
				.attr("class", "y axis")
				.call(cbr_yAxis);
			cbr_svg.selectAll(".bar")
				.data(data)
				.enter()
				.append("rect")
				.attr("class", "bar")
				.attr("x", function(d) { return cbr_xscale(d.building)})
				.attr("width", cbr_xscale.rangeBand())
				.attr("y", function(d) { return cbr_yscale(d.val)})
				.attr("height", function(d) { return cbr_height - cbr_yscale(d.val)})
				.style("fill", function(d){
					return building_color[d.building]
				})
				.on("mousemove", function(d) {
					var html = '<div>' + d.val + '</div>';
					tooltip.classed("hidden", false)
						.style("left", event.pageX + "px")
						.style("top", (event.pageY + 20) + "px")
						.html(html)
						.transition() 
						.duration(500)
						.style("opacity", 0.9);
				})
				.on("mouseout",  function(d,i) {
					tooltip.classed("hidden", true).style("opacity",0);
				});;
			cbr_svg.append('g')
				.selectAll(".geography")
				.data(geography_data)
				.enter()
				.append("text")
				.attr("class", "geography")
				.attr("x", function(d) { return (cbr_xscale(d.start) + cbr_xscale(d.end) + cbr_xscale.rangeBand())/2})
				.attr("y", cbr_height + cbr_margin.bottom - 20)
				.text(function(d){return d.name})
				.style("text-anchor", "middle");
			cbr_svg.append('g')
				.selectAll("line")
				.data(geography_data)
				.enter()
				.append("line")
				.attr("class", "spliter")
				.attr("x1", function(d){return cbr_xscale(d.start) - cbr_xscale.rangeBand() * 0.05})
				.attr("y1", 0)
				.attr("x2", function(d){return cbr_xscale(d.start) - cbr_xscale.rangeBand() * 0.05})
				.attr("y2", cbr_height + cbr_margin.bottom)
				.style("stroke", "red");
		} else {
			cbr_empty();
		}
	}
</script>